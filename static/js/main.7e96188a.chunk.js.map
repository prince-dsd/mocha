{"version":3,"sources":["components/CreateRoom/CreateRoom.styles.js","components/CreateRoom/CreateRoom.component.jsx","components/Room/Room.styles.js","components/Stream/Stream.styles.js","components/Stream/Stream.component.jsx","components/Room/Room.component.jsx","App.js","serviceWorker.js","index.js"],"names":["RoomWrapper","styled","div","RoomHeader","RoomContent","Brand","BrandLogo","VideoChatIcon","VideoChat","BrandName","FlexItems","RoomDesc","RoomTag","RoomButtonDiv","ButtonDiv","RoomButton","button","RoomJoin","input","attrs","placeholder","CreateRoom","props","onClick","id","uuidV4","history","push","Container","StyledVideo","video","Stream","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","videoConstraints","height","window","innerHeight","width","innerWidth","Room","useState","peers","setPeers","socketRef","userVideo","peersRef","roomID","match","params","io","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","find","p","muted","map","index","key","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e96188a.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { VideoChat } from \"@styled-icons/remix-fill/VideoChat\";\nexport const RoomWrapper = styled.div``;\nexport const RoomHeader = styled.div`\n  display: flex;\n  height: 90px;\n  justify-content: space-between;\n`;\nexport const RoomContent = styled.div`\n  display: flex;\n  height: calc(100vh - 90px);\n  min-height: 100%;\n  align-items: center;\n  margin: 0 100px;\n  justify-content: space-between;\n`;\nexport const Brand = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: 400;\n  font-size: 1.5rem;\n  color: #878a8e;\n`;\nexport const BrandLogo = styled.div`\n  vertical-align: middle;\n`;\nexport const VideoChatIcon = styled(VideoChat)`\n  fill: #00796b;\n  width: 100px;\n  height: 54px;\n`;\nexport const BrandName = styled.div`\n  margin-bottom: 5px;\n`;\nexport const FlexItems = styled.div``;\nexport const RoomDesc = styled.div`\n  font-size: 2.75rem;\n  font-weight: 400;\n  line-height: 3.25rem;\n  padding-bottom: 0.5em;\n`;\nexport const RoomTag = styled.div`\n  font-weight: 400;\n  font-size: 1.25rem;\n  color: #5f6368;\n  padding-bottom: 3em;\n`;\nexport const RoomButtonDiv = styled.div`\n  display: flex;\n`;\nexport const ButtonDiv = styled.div`\n  font-weight: 400;\n  margin-right: 20px;\n`;\nexport const RoomButton = styled.button`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  border: none;\n  color: #fff;\n  background-color: #00796b;\n  cursor: pointer;\n  font-size: 1.2rem;\n  &:hover {\n    opacity: 0.7;\n  }\n`;\nexport const RoomJoin = styled.input.attrs({\n  placeholder: \"Enter a room link\",\n})`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  border: none;\n  color: #5f6368;\n  background-color: #eee;\n\n  font-size: 1.2rem;\n`;\n","import React from \"react\";\nimport {\n  RoomWrapper,\n  RoomHeader,\n  RoomContent,\n  Brand,\n  BrandLogo,\n  BrandName,\n  VideoChatIcon,\n  FlexItems,\n  RoomDesc,\n  RoomTag,\n  ButtonDiv,\n  RoomButtonDiv,\n  RoomButton,\n  RoomJoin,\n} from \"./CreateRoom.styles.js\";\n\nimport { v4 as uuidV4 } from \"uuid\";\n\nconst CreateRoom = (props) => {\n  function create() {\n    const id = uuidV4();\n    props.history.push(`/room/${id}`);\n  }\n\n  return (\n    <RoomWrapper>\n      <RoomHeader>\n        <Brand>\n          <BrandLogo>\n            <VideoChatIcon />\n          </BrandLogo>\n          <BrandName>Mocha</BrandName>\n        </Brand>\n      </RoomHeader>\n      <RoomContent>\n        <FlexItems>\n          <RoomDesc>Premium video meetings. Now free for everyone.</RoomDesc>\n          <RoomTag>\n            We re-engineered the service we built for secure business meetings,\n            Google Meet, to make it free and available for all.\n          </RoomTag>\n          <RoomButtonDiv>\n            <ButtonDiv>\n              <RoomButton onClick={create}>New Meeting </RoomButton>\n            </ButtonDiv>\n            <ButtonDiv>\n              <RoomJoin></RoomJoin>\n            </ButtonDiv>\n          </RoomButtonDiv>\n        </FlexItems>\n        <FlexItems></FlexItems>\n      </RoomContent>\n    </RoomWrapper>\n  );\n};\n\nexport default CreateRoom;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\nexport const StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n","import React, { useRef, useEffect } from \"react\";\nimport { StyledVideo } from \"./Stream.styles\";\nconst Stream = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\nexport default Stream;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\n\nimport { Container, StyledVideo } from \"./Room.styles\";\n\nimport Stream from \"../Stream/Stream.component\";\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2,\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"https://mochaserver.herokuapp.com/\");\n    navigator.mediaDevices\n      .getUserMedia({ video: videoConstraints, audio: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", (users) => {\n          const peers = [];\n          users.forEach((userID) => {\n            const peer = createPeer(userID, socketRef.current.id, stream);\n            peersRef.current.push({\n              peerID: userID,\n              peer,\n            });\n            peers.push(peer);\n          });\n          setPeers(peers);\n        });\n\n        socketRef.current.on(\"user joined\", (payload) => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          peersRef.current.push({\n            peerID: payload.callerID,\n            peer,\n          });\n\n          setPeers((users) => [...users, peer]);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\n          item.peer.signal(payload.signal);\n        });\n      });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on(\"signal\", (signal) => {\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  }\n\n  return (\n    <Container>\n      <StyledVideo muted ref={userVideo} autoPlay playsInline />\n      {peers.map((peer, index) => {\n        return <Stream key={index} peer={peer} />;\n      })}\n    </Container>\n  );\n};\n\nexport default Room;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./components/CreateRoom/CreateRoom.component\";\nimport Room from \"./components/Room/Room.component\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}